#include "StdAfx.h"
#include "multiCpu.h"
#include "IDT.h"


#define PTR_MAKE( a, b )	( (void*)( ( (USHORT)( ((ULONG_PTR)( a ) ) & 0xffff ) ) | ( (ULONG)( (USHORT)( ( (ULONG_PTR)( b ) ) & 0xffff ) ) ) << 16 ) )
#define PTR_LOPART( l )		( (USHORT)( ( (ULONG_PTR)( l ) ) & 0xffff ) )
#define PTR_HIPART( l )		( (USHORT)( ( ( (ULONG_PTR)( l ) ) >> 16 ) & 0xffff ) )

#pragma pack( 1 )
typedef struct
{
	USHORT	wLimit;
	ULONG	dwBase;
} IDT, *PIDT;

typedef struct
{
	USHORT	wLowOffset;
	USHORT	wSelector;
	UCHAR	bAccess;
	UCHAR	wUnused;
	USHORT	wHighOffset;
} IDT_ENTRY, *PIDT_ENTRY;
#pragma pack()


void* g_oldIntHandlers[MAX_INTERRUPT];


static void* IDTSetHandler( ULONG cpu, ULONG intNo, void* newHandler )
{
	IDT	idt;
	PIDT pIdt = &idt;
	IDT_ENTRY entry;

	loadIDT( pIdt );
	ULONG dwBase = idt.dwBase + intNo * sizeof( IDT_ENTRY );

	// Save old entry
	KIRQL irql = KeRaiseIrqlToDpcLevel();
	cliCmd();
	RtlCopyMemory( &entry, (void*)dwBase, sizeof( IDT_ENTRY ) );
	stiCmd();
	KeLowerIrql( irql );

	void* oldIsrAddr = PTR_MAKE( entry.wLowOffset, entry.wHighOffset );

	// Set new entry
	entry.wHighOffset = PTR_HIPART( newHandler );
	entry.wLowOffset = PTR_LOPART( newHandler );
	irql = KeRaiseIrqlToDpcLevel();
	cliCmd();
	RtlCopyMemory( (void*)dwBase, &entry, sizeof( IDT_ENTRY ) );
	stiCmd();
	KeLowerIrql( irql );

	return oldIsrAddr;
}


void IDTInit( void )
{
	RtlFillMemory( g_oldIntHandlers, sizeof( void* ) * MAX_INTERRUPT, 0 );
}


typedef struct
{
	ULONG intNo;
	void* oldHandler;
	void* newHandler;
} sIDTSet;


static void IDTSetHandlerDPC( IN struct _KDPC *Dpc, IN void* DeferredContext, IN void* SystemArgument1, IN void* SystemArgument2 )
{
	sIDTSet* pIDTSet = (sIDTSet*)DeferredContext;
	ULONG currentCPU = KeGetCurrentProcessorNumber();

	void* oldHandler = IDTSetHandler( currentCPU, pIDTSet->intNo, pIDTSet->newHandler );
	if( !pIDTSet->oldHandler ) pIDTSet->oldHandler = oldHandler;

	LONG* numberOfDoneCPU = (LONG*)SystemArgument1;
	if( numberOfDoneCPU ) InterlockedIncrement( numberOfDoneCPU );
}

void* IDTSetHandler( ULONG intNo, void* newHandler )
{
	if( g_oldIntHandlers[intNo] ) return NULL;

	sIDTSet idtSet;
	idtSet.intNo = intNo;
	idtSet.oldHandler = NULL;
	idtSet.newHandler = newHandler;
	mcpuExec( IDTSetHandlerDPC, (void*)&idtSet );
	g_oldIntHandlers[intNo] = idtSet.oldHandler;

	return g_oldIntHandlers[intNo];
}


void IDTResetHandler( ULONG intNo )
{
	if( !g_oldIntHandlers[intNo] ) return;

	sIDTSet idtSet;
	idtSet.intNo = intNo;
	idtSet.oldHandler = NULL;
	idtSet.newHandler = g_oldIntHandlers[intNo];
	mcpuExec( IDTSetHandlerDPC, (void*)&idtSet );
	g_oldIntHandlers[intNo] = NULL;
}
