#include "stdafx.h"
#include "..\OllyExtPatch.h"
#include "ForceFlags.h"


#define PROCESS_HEAP_OFFSET ( 0x18 )
#define HEAP_FORCE_FLAGS_OFFSET ( 0x44 )


static bool g_applied = false;
static BYTE g_patch[] = { 0x00, 0x00, 0x00, 0x00 };
static BYTE g_orig[sizeof( g_patch )] = { 0 };


void forceFlagsReset( void )
{
	g_applied = false;
}


void forceFlagsApply( bool protect )
{
	if( protect )
	{
		if( g_applied ) return;

		DWORD processHeapAddress = peblock + PROCESS_HEAP_OFFSET;
		DWORD processHeap = 0;
		BOOL readSuccess = ReadProcessMemory( process, (void*)processHeapAddress, &processHeap, sizeof( processHeap ), NULL );
		PLUGIN_CHECK_ERROR( readSuccess, return;, UNABLE_TO_READ_MEMORY_AT, processHeapAddress );

		if( !patchApply( process, (void*)( processHeap + HEAP_FORCE_FLAGS_OFFSET ), g_orig, g_patch, sizeof( g_patch ) ) )
			return;

		g_applied = true;
	}
	else
	{
		if( !g_applied ) return;

		DWORD processHeapAddress = peblock + PROCESS_HEAP_OFFSET;
		DWORD processHeap = 0;
		BOOL readSuccess = ReadProcessMemory( process, (void*)processHeapAddress, &processHeap, sizeof( processHeap ), NULL );
		PLUGIN_CHECK_ERROR( readSuccess, return;, UNABLE_TO_READ_MEMORY_AT, processHeapAddress );

		if( !patchApply( process, (void*)( processHeap + HEAP_FORCE_FLAGS_OFFSET ), NULL, g_orig, sizeof( g_orig ) ) )
			return;

		g_applied = false;
	}
}
