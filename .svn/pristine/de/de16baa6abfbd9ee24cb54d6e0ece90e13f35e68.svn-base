#include "stdafx.h"
#include "OllyExtProtect.h"

#include "IsDebuggerPresent.h"
#include "NtGlobalFlag.h"
#include "HeapFlags.h"
#include "ForceFlags.h"
#include "CheckRemoteDebuggerPresent.h"
#include "OutputDebugStringA.h"
#include "OutputDebugStringW.h"


sProtectOptions g_protectOptions = { 0 };


#define ISDEBUGGERPRESENT L"IsDebuggerPresent"
#define NTGLOBALFLAG L"NtGlobalFlag"
#define HEAPFLAGS L"HeapFlags"
#define FORCEFLAGS L"ForceFlags"
#define CHECKREMOTEDEBUGGERPRESENT L"CheckRemoteDebuggerPresent"
#define OUTPUTDEBUGSTRING L"OutputDebugString"

#define GETFROMINI( feature, option ) \
{ \
	DWORD data = 0; \
	Getfromini( NULL, PLUGIN_NAME, feature, L"%d", &data );\
	option = ( data != 0 ); \
}


void protectReadOptions( void )
{
	GETFROMINI( ISDEBUGGERPRESENT, g_protectOptions.isDebuggerPresent );
	GETFROMINI( NTGLOBALFLAG, g_protectOptions.ntGlobalFlag );
	GETFROMINI( HEAPFLAGS, g_protectOptions.heapFlags );
	GETFROMINI( FORCEFLAGS, g_protectOptions.forceFlags );
	GETFROMINI( CHECKREMOTEDEBUGGERPRESENT, g_protectOptions.checkRemoteDebuggerPresent );
	GETFROMINI( OUTPUTDEBUGSTRING, g_protectOptions.outputDebugString );
}


void protectWriteOptions( void )
{
	Writetoini( NULL, PLUGIN_NAME, ISDEBUGGERPRESENT, L"%d", g_protectOptions.isDebuggerPresent );
	Writetoini( NULL, PLUGIN_NAME, NTGLOBALFLAG, L"%d", g_protectOptions.ntGlobalFlag );
	Writetoini( NULL, PLUGIN_NAME, HEAPFLAGS, L"%d", g_protectOptions.heapFlags );
	Writetoini( NULL, PLUGIN_NAME, FORCEFLAGS, L"%d", g_protectOptions.forceFlags );
	Writetoini( NULL, PLUGIN_NAME, CHECKREMOTEDEBUGGERPRESENT, L"%d", g_protectOptions.checkRemoteDebuggerPresent );
	Writetoini( NULL, PLUGIN_NAME, OUTPUTDEBUGSTRING, L"%d", g_protectOptions.outputDebugString );
}


void protectReset( void )
{
	isDebuggerPresentReset();
	ntGlobalFlagReset();
	heapFlagsReset();
	forceFlagsReset();
	checkRemoteDebuggerPresentReset();
	outputDebugStringAReset();
	outputDebugStringWReset();
}


bool protectApply( void )
{
	PLUGIN_CHECK_ERROR( process, return false;, NO_DEBUGGE );

	isDebuggerPresentApply( g_protectOptions.isDebuggerPresent );
	ntGlobalFlagApply( g_protectOptions.ntGlobalFlag );
	heapFlagsApply( g_protectOptions.heapFlags );
	forceFlagsApply( g_protectOptions.forceFlags );
	checkRemoteDebuggerPresentApply( g_protectOptions.checkRemoteDebuggerPresent );
	outputDebugStringAApply( g_protectOptions.outputDebugString );
	outputDebugStringWApply( g_protectOptions.outputDebugString );

	return true;
}
