#include "stdafx.h"
#include "plugin.h"
#include "resource.h"
#include "OllyExt.h"
#include "OllyExtVersion.h"
#include "OllyExtProtect.h"
#include "OptionsDialog.h"


#define PROTECT_SET_OPTION( tab, control, option ) \
{ \
	HWND hwnd = GetDlgItem( g_tabs[tab].hwnd, control ); \
	option = SendMessage( hwnd, BM_GETSTATE, 0, 0 ) == BST_CHECKED; \
}

typedef enum
{
	TAB_ANTI_DEBUG,
	TAB_BUGFIXES,
	TAB_NUM
} eTabType;

typedef struct
{
	wchar_t* name;
	DWORD id;
	HWND hwnd;
} sTab;

static sTab g_tabs[TAB_NUM] =
{
	{ L"Anti-Debug", IDD_TAB1, NULL },
	{ L"Bugfixes", IDD_TAB2, NULL }
};

static HICON g_hIconSmall = NULL;
static HICON g_hIconBig = NULL;
static int g_selectedTab = 0;


static void createTabs( HWND hDlg )
{
	HWND hTab = GetDlgItem( hDlg, IDC_OPTIONS_TAB );
	if( !hTab ) return;

	RECT tabRect = { 0 };
	GetWindowRect( hTab, &tabRect );

	LONG itemYMax = 0;
	LONG w = tabRect.right - tabRect.left;
	LONG h = tabRect.bottom- tabRect.top;

	TCITEM tcItem;
	for( DWORD i = 0; i < sizeof( g_tabs ) / sizeof( g_tabs[0] ); ++i )
	{
		memset( &tcItem, 0, sizeof( TCITEM ) );
		tcItem.mask = TCIF_TEXT;
		tcItem.pszText = g_tabs[i].name;

		if( TabCtrl_InsertItem( hTab, i, &tcItem ) == -1 ) return;

		RECT itemRect = { 0 };
		TabCtrl_GetItemRect( hTab, i, &itemRect );
		if( itemYMax < itemRect.bottom )
			itemYMax = itemRect.bottom;
	}

	for( DWORD i = 0; i < sizeof( g_tabs ) / sizeof( g_tabs[0] ); ++i )
	{
		g_tabs[i].hwnd = CreateDialog( g_instance, MAKEINTRESOURCE( g_tabs[i].id ), hTab, NULL );
		SetWindowPos( g_tabs[i].hwnd,
						NULL,
						0,
						itemYMax,
						w,
						h,
						0 );
		ShowWindow( g_tabs[i].hwnd, SW_HIDE );
	}

	g_selectedTab = 0;
	ShowWindow( g_tabs[g_selectedTab].hwnd, SW_SHOW );
}


static void setOptions( HWND hDlg )
{
	HWND isDebuggerPresent = GetDlgItem( g_tabs[TAB_ANTI_DEBUG].hwnd, IDC_ISDEBUGGERPRESENT );
	SendMessage( isDebuggerPresent, BM_SETCHECK, g_options.isDebuggerPresent ? BST_CHECKED : BST_UNCHECKED, 0 );
}


BOOL CALLBACK OptionsDlgProc( HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam )
{
	switch( msg )
	{
	case WM_INITDIALOG:
	{
		SetWindowText( hDlg, g_versionStr );

		g_hIconSmall = LoadIcon( g_instance, MAKEINTRESOURCE( IDI_ICON_SMALL ) );
		SendMessage( hDlg, WM_SETICON, ICON_SMALL, (LPARAM)g_hIconSmall );

		g_hIconBig = LoadIcon( g_instance, MAKEINTRESOURCE( IDI_ICON ) );
		SendMessage( hDlg, WM_SETICON, ICON_BIG, (LPARAM)g_hIconBig );

		int w = GetSystemMetrics( SM_CXSCREEN );
		int h = GetSystemMetrics( SM_CYSCREEN );
		RECT rect;
		GetWindowRect( hDlg, &rect );
		SetWindowPos( hDlg, 0, ( w - rect.right ) >> 1, ( h - rect.bottom ) >> 1, 0, 0, SWP_NOZORDER | SWP_NOSIZE );

		createTabs( hDlg );
		setOptions( hDlg );

		return TRUE;
	}
	break;

	case WM_DESTROY:
	case WM_CLOSE:
		if( g_hIconSmall )
		{
			DestroyIcon( g_hIconSmall );
			g_hIconSmall = NULL;
		}
		if( g_hIconBig )
		{
			DestroyIcon( g_hIconBig );
			g_hIconBig = NULL;
		}
		EndDialog( hDlg, 0 );
		return TRUE;
	break;

	case WM_COMMAND:
        switch( HIWORD( wParam ) )
        {
        case BN_CLICKED:       
			switch( LOWORD( wParam ) )
			{
			case IDC_OK:
			{
				PROTECT_SET_OPTION( TAB_ANTI_DEBUG, IDC_ISDEBUGGERPRESENT, g_options.isDebuggerPresent );

				protectWriteOptions();
				if( process ) protectApply();

				EndDialog( hDlg, 0 );
				return TRUE;
			}
			break;

			case IDC_CANCEL:
				EndDialog( hDlg, 0 );
				return TRUE;
			break;

			case IDC_ABOUT:
				wchar_t s[TEXTLEN];
				wsprintf( s, L"%ws\n%ws", g_versionStr, g_copyrightStr );
				MessageBox( NULL, s, PLUGIN_NAME, MB_OK | MB_ICONINFORMATION );
				return TRUE;
			break;
			}
        break;
        }
	break;

	case WM_NOTIFY:
	{
		LPNMHDR lpnmhdr = (LPNMHDR)lParam;
		switch( lpnmhdr->code )
        {
        case TCN_SELCHANGE:
			switch( lpnmhdr->idFrom )
			{
			case IDC_OPTIONS_TAB:
				int pageID = TabCtrl_GetCurSel( lpnmhdr->hwndFrom );
				if( pageID >= 0 )
				{
					ShowWindow( g_tabs[g_selectedTab].hwnd, SW_HIDE );
					g_selectedTab = pageID;
					ShowWindow( g_tabs[g_selectedTab].hwnd, SW_SHOW );
				}
				return TRUE;
			break;
			}
        break;
        }
	}
	break;

    default:
		return DefWindowProc( hDlg, msg, wParam, lParam );
	}

	return FALSE;
}
