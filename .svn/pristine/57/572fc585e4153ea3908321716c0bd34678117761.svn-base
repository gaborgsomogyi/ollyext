#include "StdAfx.h"
#include "protect.h"
#include "OllyExtIO.h"


typedef enum
{
	IOCTL_PROTECT_RDTSC
} sDriverCmdType;

typedef struct
{
	ULONG type;
	ULONG param1;
	ULONG param2;
	ULONG param3;
	ULONG param4;
} sDriverCmd;


PCWSTR g_deviceNameW = L"\\Device\\OllyExt";
UNICODE_STRING g_deviceNameUC;
PCWSTR g_symbolicLinkNameW = L"\\DosDevices\\OllyExt";
UNICODE_STRING g_symbolicLinkNameUC;
PDEVICE_OBJECT g_deviceObject = NULL;


NTSTATUS DriverDispatcher( IN PDEVICE_OBJECT g_deviceObject, IN PIRP Irp );


NTSTATUS driverIOInit( PDRIVER_OBJECT DriverObject )
{
    NTSTATUS status = STATUS_SUCCESS;
	
	RtlInitUnicodeString( &g_deviceNameUC, g_deviceNameW );

	status = IoCreateDevice( DriverObject, sizeof( sDriverCmd ), &g_deviceNameUC, FILE_DEVICE_NULL, 0, FALSE, &g_deviceObject );
	if( !NT_SUCCESS( status ) )
	{
		DbgPrint( "OllyExt: IoCreateDevice failed: %08X\n", status );
		return status;
	}

    RtlInitUnicodeString( &g_symbolicLinkNameUC, g_symbolicLinkNameW );

    status = IoCreateSymbolicLink( &g_symbolicLinkNameUC, &g_deviceNameUC );
	if( !NT_SUCCESS( status ) )
	{
		if( g_deviceObject )
		{
			IoDeleteDevice( g_deviceObject );
			g_deviceObject = NULL;
		}
		DbgPrint( "OllyExt: IoCreateSymbolicLink failed: %08X\n", status );
		return status;
	}

	DriverObject->MajorFunction[IRP_MJ_CREATE] = DriverDispatcher;
    DriverObject->MajorFunction[IRP_MJ_WRITE] = DriverDispatcher;
	DriverObject->MajorFunction[IRP_MJ_CLOSE] = DriverDispatcher;

	return status;
}


void driverIOClean( void )
{
    IoDeleteSymbolicLink( &g_symbolicLinkNameUC );
	if( g_deviceObject )
	{
		IoDeleteDevice( g_deviceObject );
		g_deviceObject = NULL;
	}
}


NTSTATUS QueryService( sDriverCmd* pCmd )
{
	NTSTATUS status = STATUS_SUCCESS;

	switch( pCmd->type )
	{
	case IOCTL_PROTECT_RDTSC:
		DbgPrint( "OllyExt: IOCTL_PROTECT_RDTSC %d\n", pCmd->param1 );
		if( pCmd->param1 ) protectEnable( PROTECT_FEATURE_RDTSC );
		else protectDisable( PROTECT_FEATURE_RDTSC );
	break;
	}

	return status;
}


NTSTATUS DriverDispatcher( IN PDEVICE_OBJECT g_deviceObject, IN PIRP Irp )
{
    NTSTATUS status = STATUS_SUCCESS;

	Irp->IoStatus.Information = 0;

    PIO_STACK_LOCATION pIsl = IoGetCurrentIrpStackLocation( Irp );
	if( pIsl->MajorFunction == IRP_MJ_WRITE )
    {
		if( pIsl->Parameters.Write.Length == sizeof( sDriverCmd ) )
		{
			__try
			{
				status = QueryService( (sDriverCmd*)Irp->UserBuffer );
				Irp->IoStatus.Information = pIsl->Parameters.Write.Length;
			}
			__except( EXCEPTION_EXECUTE_HANDLER )
			{
				status = STATUS_IN_PAGE_ERROR;
			}
		}
		else
		{
			status = STATUS_ACCESS_DENIED;
		}
	}

	Irp->IoStatus.Status = status;
	IoCompleteRequest( Irp, IO_NO_INCREMENT );

	return status;
}
