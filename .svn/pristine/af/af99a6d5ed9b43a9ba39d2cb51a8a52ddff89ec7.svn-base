#pragma once


#define UNABLE_TO_GET_WINDOW_TEXT ( L"Unable to get window text" )
#define UNABLE_TO_SET_WINDOW_TEXT ( L"Unable to set window text" )
#define NO_DEBUGGE ( L"No active debugge found" )
#define UNABLE_TO_READ_MEMORY_AT ( L"Unable to read memory at: %08X" )
#define UNABLE_TO_WRITE_MEMORY_AT ( L"Unable to write memory at: %08X" )
#define UNABLE_TO_FIND_MODULE ( L"Unable to find module: %s" )
#define UNABLE_TO_FIND_FUNCTION ( L"Unable to find function: %s::%s" )
#define UNABLE_TO_ALLOCATE_LOCAL_MEMORY ( L"Unable to allocate memory" )
#define UNABLE_TO_ALLOCATE_REMOTE_MEMORY ( L"Unable to allocate memory in debugge" )
#define UNABLE_TO_FREE_REMOTE_MEMORY ( L"Unable to free memory in debugge: %08X" )
#define UNABLE_TO_ASSEMBLE_CODE ( L"Unable to assemble code: %s at: %08X error: %s" )
#define UNABLE_TO_DISASSEMBLE_CODE ( L"Unable to disassemble at: %08X" )
#define UNABLE_TO_ADD_STRING ( L"Unable to add string: %s at: %08X" )
#define UNABLE_TO_START_DETOURS_TRANSACTION ( L"Unable to start detours transaction: %08X" )
#define UNABLE_TO_UPDATE_DETOURS_THREAD ( L"Unable to update detours thread: %08X" )
#define UNABLE_TO_ATTACH_DETOURS ( L"Unable to attach detours function: %08X error: %08X" )
#define UNABLE_TO_DETACH_DETOURS ( L"Unable to detach detours function: %08X error: %08X" )
#define UNABLE_TO_COMMIT_DETOURS_TRANSACTION ( L"Unable to commit detours transaction: %08X" )
#define UNABLE_TO_ALLOC_HOOK ( L"Unable to allocate hook for module: %s func: %s" )
#define UNABLE_TO_ATTACH_HOOK ( L"Unable to attach hook for module: %s func: %s" )
#define UNABLE_TO_FREE_HOOK ( L"Unable to free hook for module: %s func: %s" )


#define PLUGIN_CHECK_ERROR( condition, action, errorFormat, ... ) \
{ \
	if( !( condition ) ) \
	{ \
		wchar_t placeStr[TEXTLEN]; \
		wsprintf( placeStr, L"\nFile: %s Line: %d", _T( __FILE__ ), __LINE__ ); \
		wchar_t errorStr[TEXTLEN]; \
		wsprintf( errorStr, ( errorFormat ), __VA_ARGS__ ); \
		wcscat_s( errorStr, TEXTLEN, placeStr ); \
		MessageBox( NULL, errorStr, PLUGIN_NAME, MB_OK | MB_ICONERROR ); \
		action \
	} \
}
